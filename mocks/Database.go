// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type User struct {
	id    int
	email string

	password_hash []byte
}

type URL struct {
	Key          string     `json:"key" binding:"required"`
	Target       string     `json:"target" binding:"required"`
	Nonce        string     `json:"nonce" binding:"required"`
	Created      time.Time  `json:"created" binding:"required"`
	UserID       int        `json:"user_id" binding:"required"`
	LastAccessed *time.Time `json:"last_accessed" binding:"required"`
	AccessCount  int        `json:"access_count" binding:"required"`
}

// UserURLs are
type UserURLs struct {
	ShortURL     string  `json:"short_url"`
	Target       string  `json:"target"`
	Created      string  `json:"created"`
	LastAccessed *string `json:"last_accessed"`
	AccessCount  int     `json:"access_count"`
}

// Close provides a mock function with given fields:
func (_m *Database) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableURL provides a mock function with given fields: userID, dbID
func (_m *Database) DisableURL(userID int, dbID uint64) error {
	ret := _m.Called(userID, dbID)

	if len(ret) == 0 {
		panic("no return value specified for DisableURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint64) error); ok {
		r0 = rf(userID, dbID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConnection provides a mock function with given fields:
func (_m *Database) GetConnection() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetURL provides a mock function with given fields: id
func (_m *Database) GetURL(id uint64) (string, string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (string, string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64) string); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetURLs provides a mock function with given fields: userID
func (_m *Database) GetURLs(userID int) ([]UserURLs, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetURLs")
	}

	var r0 []UserURLs
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]UserURLs, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []UserURLs); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserURLs)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: email
func (_m *Database) GetUser(email string) (*User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertURL provides a mock function with given fields: userID, url
func (_m *Database) InsertURL(userID int, url string) (int64, string, error) {
	ret := _m.Called(userID, url)

	if len(ret) == 0 {
		panic("no return value specified for InsertURL")
	}

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string) (int64, string, error)); ok {
		return rf(userID, url)
	}
	if rf, ok := ret.Get(0).(func(int, string) int64); ok {
		r0 = rf(userID, url)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int, string) string); ok {
		r1 = rf(userID, url)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int, string) error); ok {
		r2 = rf(userID, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Ping provides a mock function with given fields:
func (_m *Database) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignupUser provides a mock function with given fields: email, password
func (_m *Database) SignupUser(email string, password string) error {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for SignupUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccessAndLastAccessed provides a mock function with given fields: id
func (_m *Database) UpdateAccessAndLastAccessed(id uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessAndLastAccessed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateUser provides a mock function with given fields: email
func (_m *Database) ValidateUser(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
